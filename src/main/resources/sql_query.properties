#queries from CourseDao.class
course.add=INSERT INTO courses(name) VALUES (?)
course.getById=SELECT id, name FROM courses WHERE id = ?
course.getAll=SELECT id, name FROM courses
course.update=UPDATE courses SET name = ? WHERE id = ?
course.delete=DELETE FROM courses WHERE id = ?
#queries from RoomDao.class
room.add=INSERT INTO rooms(building, number) VALUES (?, ?)
room.getById=SELECT id, building, number FROM rooms WHERE id = ?
room.getAll=SELECT id, building, number FROM rooms
room.update=UPDATE rooms SET building = ?, number = ? WHERE id = ?
room.delete=DELETE FROM rooms WHERE id = ?
#queries from FacultyDao.class
faculty.add=INSERT INTO faculties(name, dean_id) VALUES (?, ?)
faculty.getById=SELECT f.id, f.name, f.dean_id, t.first_name, t.patronymic, t.last_name \
                FROM faculties f \
                LEFT JOIN teachers t ON f.dean_id = t.id \
                WHERE f.id = ?
faculty.getAll=SELECT f.id, f.name, f.dean_id, t.first_name, t.patronymic, t.last_name \
               FROM faculties f \
               LEFT JOIN teachers t ON f.dean_id = t.id
faculty.update=UPDATE faculties SET name = ?, dean_id = ? WHERE id = ?
faculty.delete=DELETE FROM faculties WHERE id = ?
#queries from GroupDao.class
group.add=INSERT INTO groups(name, faculty_id) VALUES (?, ?)
group.getById=SELECT g.id, g.name as group_name, g.faculty_id, f.name as faculty_name, f.dean_id, t.first_name, t.patronymic, t.last_name \
			  FROM groups g \
			  INNER JOIN faculties f ON g.faculty_id = f.id \
			  LEFT JOIN teachers t ON f.dean_id = t.id \
			  WHERE g.id = ?
group.getAll=SELECT g.id, g.name as group_name, g.faculty_id, f.name as faculty_name, f.dean_id, t.first_name, t.patronymic, t.last_name \
             FROM groups g \
             INNER JOIN faculties f ON g.faculty_id = f.id \
             LEFT JOIN teachers t ON f.dean_id = t.id
group.update=UPDATE groups SET name = ?, faculty_id = ? WHERE id = ?
group.delete=DELETE FROM groups WHERE id = ?
#queries from StudentDao.class for table students
student.add=INSERT INTO students(first_name, last_name, patronymic, group_id) VALUES (?, ?, ?, ?)
student.getById=SELECT s.id, s.first_name, s.last_name, s.patronymic, s.group_id, \
			    g.name as group_name, g.faculty_id, \ 
				f.name as faculty_name, f.dean_id, \
				t.first_name as dean_first_name, t.last_name as dean_last_name, t.patronymic as dean_patronymic \
				FROM students s \
				INNER JOIN groups g ON s.group_id = g.id \
				INNER JOIN faculties f ON g.faculty_id = f.id \
				LEFT JOIN teachers t ON f.dean_id = t.id \
				WHERE s.id = ?
student.getAll=SELECT s.id, s.first_name, s.last_name, s.patronymic, s.group_id, \
                g.name as group_name, g.faculty_id, \ 
                f.name as faculty_name, f.dean_id, \
                t.first_name as dean_first_name, t.last_name as dean_last_name, t.patronymic as dean_patronymic \
                FROM students s \
                INNER JOIN groups g ON s.group_id = g.id \
                INNER JOIN faculties f ON g.faculty_id = f.id \
                LEFT JOIN teachers t ON f.dean_id = t.id
student.update=UPDATE students SET first_name = ?, last_name = ?, patronymic = ?, group_id = ? WHERE id = ?
student.delete=DELETE FROM students WHERE id = ?
student.getAll.with.course.name=SELECT students.student_id, students.group_id, students.first_name, students.last_name \
                                FROM students \
                                INNER JOIN (students_courses INNER JOIN courses USING (course_id)) \
                                USING (student_id) \
                                WHERE courses.course_name = ?             
student_course.create.table=CREATE TABLE public.students_courses \
             ( \
             student_id integer NOT NULL, \
             course_id integer NOT NULL, \
             CONSTRAINT students_courses_pkey PRIMARY KEY (student_id, course_id), \
             CONSTRAINT course_id FOREIGN KEY (course_id) \
             REFERENCES public.courses (course_id) MATCH SIMPLE \
             ON UPDATE NO ACTION \
             ON DELETE CASCADE, \
             CONSTRAINT student_id FOREIGN KEY (student_id) \
             REFERENCES public.students (student_id) MATCH SIMPLE \
             ON UPDATE NO ACTION \
             ON DELETE CASCADE \
             );
student_course.add=INSERT INTO students_courses(student_id, course_id) VALUES (?, ?)
student_course.delete=DELETE FROM students_courses WHERE student_id = ? and course_id = ?

